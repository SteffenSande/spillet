---
// server
import FinalQuestion from "../../../components/finalQuestion";
import FinalQuestionNotFound from "../../../components/finalQuestion/FinalQuestionNotFound";
import Layout from "../../../layouts/Layout.astro";
import { getGameId } from "../../../lib/params";
import prisma from "../../../lib/prisma";
import type { IFinalQuestion, Team } from "../../../lib/types";
const { finalQuestionId } = Astro.params;

const gameId = getGameId(Astro);

const user = Astro.cookies.get("session-mafia-grande")?.value;
let winnerTeam: Team | undefined;
let question: IFinalQuestion | undefined;
if (finalQuestionId && user) {
  const finalQuestion = await prisma.finalQuestion.findFirst({
    where: {
      externalId: finalQuestionId,
    },
  });

  if (finalQuestion) {
    question = {
      assignment: finalQuestion.assignment,
      codeLength: finalQuestion.code.length,
      externalId: finalQuestion.externalId,
    };
    const isSolved = await prisma.finalQuestionGuess.findFirst({
      where: {
        finalQuestionId: finalQuestion.id,
        isCorrect: true,
      },
      include: {
        alias: {
          include: {
            teams: true,
          },
        },
      },
    });

    if (!isSolved) {
      const alias = await prisma.alias.findFirstOrThrow({
        where: { externalId: user },
      });

      if (
        !(await prisma.finalFound.findFirst({
          where: {
            aliasId: alias.id,
            finalQuestionId: finalQuestion.id,
          },
        }))
      ) {
        await prisma.finalFound.create({
          data: {
            aliasId: alias.id,
            finalQuestionId: finalQuestion.id,
          },
        });
      }
    } else {
      winnerTeam = isSolved.alias.teams;
    }
  }
}

const teams = await prisma.teams.findMany();
const games = await prisma.games.findFirst();
---

<Layout>
  {
    games?.canFindFinalQuestion && (
      <FinalQuestion
        gameId={gameId}
        finalQuestion={question}
        teams={teams}
        initWinnerTeam={winnerTeam}
        client:only
      />
    )
  }
  {
    !games?.canFindFinalQuestion && (
      <FinalQuestionNotFound gameId={gameId} client:load />
    )
  }
</Layout>
