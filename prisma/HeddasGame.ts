import { createReadStream } from "fs";
import path from "path";
import { PrismaClient } from "../src/generated/prisma/client.js";
import { parse } from "fast-csv";

const prisma = new PrismaClient();

export async function main() {
  const game = await prisma.games.create({
    data: {
      name: "Hedda 30",
      maxGuesses: 1,
      rules: `üõ† Praktisk informasjon
For √• finne formelen m√• du samle hint.
Hintene er skjult bak QR-koder spredt rundt i huset. N√•r du finner en QR-kode, scanner du den med mobilen og kommer til en nettside med en oppgave. L√∏ser du oppgaven riktig, f√•r du et hint ‚Äì som vil hjelpe deg i jakten p√• formelen.
Det finnes totalt 17 hintoppgaver, og du trenger flere av dem for √• finne formelen.

‚ùó Regler og rammer:
‚Ä¢ Rom som ikke er en del av spillet er tydelig merket med skilt. G√• ikke inn der.
‚Ä¢ Du m√• ikke √∏delegge, flytte p√• eller rote i huset ‚Äì det du leter etter er smart plassert, ikke skjult bak bilder eller sokkelister.
‚Ä¢ Etterlat alle rom slik du fant dem, s√• f√•r alle en fair sjanse.
‚Ä¢ Du kan samarbeide, men sp√∏r deg selv: Stoler du p√• dem? Kanskje dere egentlig har ulike m√•l.

üß© Hemmelig informasjon
Alle har f√•tt utdelt hemmelig informasjon.
Det kan hjelpe deg med √•:
‚Ä¢ Finne hint
‚Ä¢ Forst√• hvem du b√∏r samarbeide med
‚Ä¢ Avsl√∏re gruppetilh√∏righeten til andre

üéØ Avsl√∏ring og eliminering
Hver spiller kan opptil tre ganger i l√∏pet av spillet gjette hvilken gruppe en annen deltaker tilh√∏rer.
‚Ä¢ Hvis to forskjellige spillere gjetter riktig p√• samme person, er den personen ute av spillet ‚Äì og mister muligheten til √• p√•virke formelens skjebne.
‚Ä¢ Gjetter du feil, skjer det ingenting ‚Äì men du har brukt opp ett av dine tre fors√∏k.

üèÜ Vinner
Alle gjenlevende deltakere p√• laget som f√∏rst finner formelen er √• anse som vinnere.
Det er derfor i din interesse √•:
‚Ä¢ Holde deg i live
‚Ä¢ Finne ut hvem som er p√• ditt lag
‚Ä¢ F√• tak i formelen f√∏r de andre

üß† Husk:
Den som finner formelen, bestemmer hva som skjer.
Men ingen kan vinne alene. Og ingen er trygge.`,
      intro: `üé≠ Introduksjon til leken
Velkommen til fest.
Glassene er fylt, lysene er dempet, og du st√•r midt i en forsamling av b√•de gode venner og mildt sagt uforutsigbare bekjente. Dette er ikke en hvilken som helst bursdag. Dette er samlingspunktet for en gruppe mennesker som ‚Äì p√• et eller annet tidspunkt ‚Äì alle har bidratt til noe st√∏rre.
Vertinnen (som kanskje har f√•tt litt for mange id√©er opp gjennom √•rene) har sammen med flere av dere utviklet noe... uvanlig. En formel. Ikke en oppskrift p√• kake eller cocktails ‚Äì men en formel med kraft. Den kan p√•virke beslutninger. Endre dynamikker. Avsl√∏re sannheter. Eller lyve overbevisende. Alt etter hvordan den brukes.
Og her kommer problemet:
Formelen er borte.
Den er skjult et sted i huset.
Og alle vil ha den.
Men ikke alle vil det samme.
N√• begynner kappl√∏pet.
Gjennom koder, spor og hint vil dere fors√∏ke √• finne frem til formelen f√∏r de andre gj√∏r det. Den som f√∏rst finner den, bestemmer hva som skjer videre. Og akkurat d√©t... burde bekymre dere alle.
Spill godt. Stol p√• ingen.  `,
    },
  });

  await prisma.teams.create({
    data: {
      name: "De Uskyldige",
      gamesId: game.id,
    },
  });
  await prisma.teams.create({
    data: {
      name: "De Gr√•dige",
      gamesId: game.id,
    },
  });
  await prisma.teams.create({
    data: {
      name: "De Destruktive",
      gamesId: game.id,
    },
  });
  await prisma.teams.create({
    data: {
      name: "De Tvilende",
      gamesId: game.id,
    },
  });

  const csvPath = path.join(process.cwd(), "data", "aliasHedda.csv");
  const aliases: AliasCSVLeon[] = [];

  // Read CSV
  await new Promise((resolve, reject) => {
    createReadStream(csvPath)
      .pipe(
        parse<AliasCSVLeon, AliasCSVLeon>({
          headers: true,
          delimiter: ";",
          quote: '"',
          ignoreEmpty: true,
        })
      )
      .on("data", (row) => {
        aliases.push(row);
      })
      .on("end", resolve)
      .on("error", reject);
  });

  // Seed data
  for (const row of aliases) {
    try {
      await prisma.alias.create({
        data: {
          description: row.description,
          name: row.name,
          hiddenDescription: row.hiddenDescription,
          teamsId: parseInt(row.teamsId, 10) - 4,
          alive: true,
        },
      });
    } catch (error) {
      console.error(`‚ùå Error creating alias ${row.name}:`, error);
    }
  }

  const csvPathHints = path.join(process.cwd(), "data", "oppgaverH.csv");
  const hints: Hint[] = [];
  // Read CSV
  await new Promise((resolve, reject) => {
    createReadStream(csvPathHints)
      .pipe(
        parse<Hint, Hint>({
          headers: true,
          delimiter: ";",
          quote: '"',
          escape: '"',
          ignoreEmpty: true,
          trim: true,
        })
      )
      .on("data", (row) => hints.push(row))
      .on("end", resolve)
      .on("error", reject);
  });

  const hintsFiltered = hints.filter((hint) => hint.gate);

  // Seed data
  for (const row of hintsFiltered) {
    try {
      await prisma.codes.create({
        data: {
          code: row.solution,
          hint: row.hint,
          assignment: row.gate,
          imagePath: row.url,
        },
      });
    } catch (error) {
      console.error(`‚ùå Error creating alias ${row.gate}:`, error);
    }
  }

  await prisma.finalQuestion.create({
    data: {
      assignment:
        "Du har funnet formelen, men den er l√•st i en safe. Har du knekt koden?",
      code: "1a#v34",
    },
  });
}
main();

// export interface AliasCSV {
//   id: string;
//   sortId: string;
//   teamsId: string;
//   teamsName: string;
//   title: string;
//   firstName: string;
//   nickName: string;
//   LastName: string;
//   Initials: string;
//   FullName: string;
//   kj√∏nn: string;
//   publicDescription: string;
//   secretDescription: string;
// }

export interface AliasCSVLeon {
  name: string;
  description: string;
  hiddenDescription: string;
  teamsId: string;
}

interface Hint {
  gate: string;
  solution: string;
  hint: string;
  url?: string;
}

// interface FinalQuesiton {
//   id: number;
//   externalId: string;
//   code: string;
//   assignment: string;
// }

// Sm√•stegim√∏rket,vis√∏kerenvei,
// derhandlinggirmening,ogordenebrei.
// Empati+Kunnskap√óHandling‚Äì
// enformels√•enkel,denendrerallting.
