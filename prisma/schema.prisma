generator client {
  provider     = "prisma-client"
  output       = "../src/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model games {
  id                       Int     @id @default(autoincrement())
  name                     String
  maxGuesses               Int
  nrOfCorrectGuessesToKill Int     @default(2)
  teams                    teams[]
  canFindFinalQuestion     Boolean @default(false)
  rules                    String
  intro                    String
}

model teams {
  id           Int            @id @default(autoincrement())
  name         String
  description  String         @default("")
  gamesId      Int
  games        games          @relation(fields: [gamesId], references: [id])
  Alias        Alias[]
  AliasGuesses AliasGuesses[]
}

model Alias {
  id                 Int                  @id @default(autoincrement())
  externalId         String               @unique @default(uuid())
  name               String
  description        String               @default("")
  hiddenDescription  String?
  teams              teams                @relation(fields: [teamsId], references: [id])
  teamsId            Int
  CodesGuess         CodesGuess[]
  guessesMade        AliasGuesses[]       @relation("guess")
  guesses            AliasGuesses[]       @relation("guesser")
  CodeFound          CodeFound[]
  alive              Boolean              @default(true)
  FinalQuestionGuess FinalQuestionGuess[]
  FinalFound         FinalFound[]
}

model AliasGuesses {
  id        Int     @id @default(autoincrement())
  guess     Alias   @relation(name: "guess", fields: [guessId], references: [id])
  guessId   Int
  guesserId Int
  guesser   Alias   @relation(name: "guesser", fields: [guesserId], references: [id])
  isCorrect Boolean
  team      teams   @relation(fields: [teamsId], references: [id])
  teamsId   Int
}

model Codes {
  id         Int          @id @default(autoincrement())
  code       String
  CodesGuess CodesGuess[]
  externalId String       @unique @default(uuid())
  hint       String
  assignment String       @db.Text
  CodeFound  CodeFound[]
}

model CodeFound {
  id      Int   @id @default(autoincrement())
  code    Codes @relation(fields: [codesId], references: [id])
  codesId Int
  alias   Alias @relation(fields: [aliasId], references: [id])
  aliasId Int
}

model CodesGuess {
  id        Int     @id @default(autoincrement())
  code      Codes   @relation(fields: [codesId], references: [id])
  codesId   Int
  alias     Alias   @relation(fields: [aliasId], references: [id])
  aliasId   Int
  count     Int     @default(0)
  isCorrect Boolean
}

model FinalQuestion {
  id                 Int                  @id @default(autoincrement())
  externalId         String               @unique @default(uuid())
  FinalQuestionGuess FinalQuestionGuess[]
  code               String
  assignment         String               @db.Text
  FinalFound         FinalFound[]
}

model FinalQuestionGuess {
  id              Int           @id @default(autoincrement())
  alias           Alias         @relation(fields: [aliasId], references: [id])
  aliasId         Int
  finalQuestion   FinalQuestion @relation(fields: [finalQuestionId], references: [id])
  finalQuestionId Int
  isCorrect       Boolean
}

model FinalFound {
  id              Int           @id @default(autoincrement())
  finalQuestion   FinalQuestion @relation(fields: [finalQuestionId], references: [id])
  finalQuestionId Int
  alias           Alias         @relation(fields: [aliasId], references: [id])
  aliasId         Int
}
