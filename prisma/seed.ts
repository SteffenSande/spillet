import { createReadStream } from "fs";
import path from "path";
import { PrismaClient } from "../src/generated/prisma/client.js";
import { parse } from "fast-csv";

const prisma = new PrismaClient();

export async function main() {
  const game = await prisma.games.create({
    data: {
      name: "Leon 11",
      maxGuesses: 1,
      rules: ` üõ† Praktisk informasjon
For √• finne √∏yet m√• du samle hint.
Hintene er skjult bak QR-koder spredt rundt i huset. N√•r du finner en QR-kode, scanner du den med mobilen og kommer til en nettside med en oppgave. L√∏ser du oppgaven riktig, f√•r du et hint ‚Äì som vil hjelpe deg i jakten p√• √∏yet.
Det finnes totalt 12 hintoppgaver, og du trenger flere av dem for √• finne √∏yet.

‚ùó Regler og rammer:
‚Ä¢ Rom som ikke er en del av spillet er: Berit og Brage sitt rom, kjelleren og Aria sitt rom. G√• ikke inn der.
‚Ä¢ Du m√• ikke √∏delegge, flytte p√• eller rote i huset ‚Äì det du leter etter er smart plassert, ikke skjult bak bilder eller sokkelister.
‚Ä¢ Etterlat alle rom slik du fant dem, s√• f√•r alle en fair sjanse.
‚Ä¢ Du kan samarbeide, men sp√∏r deg selv: Stoler du p√• dem? Kanskje dere egentlig har ulike m√•l.

üß© Hemmelig informasjon
Alle har f√•tt utdelt hemmelig informasjon.
Det kan hjelpe deg med √•:
‚Ä¢ Finne hint.
‚Ä¢ Forst√• hvem du b√∏r samarbeide med.
‚Ä¢ Avsl√∏re gruppetilh√∏righeten til andre.
‚Ä¢ Velg selv hvor mye du er villig til √• dele med andre.
‚Ä¢ Det er ikke lov √• be om √• f√• se andres hemmelige informasjon eller vise sin egen.


üéØ Avsl√∏ring og eliminering
Hver spiller kan en gang i l√∏pet av spillet gjette hvilken gruppe en annen deltaker tilh√∏rer.
‚Ä¢ Hvis to forskjellige spillere gjetter riktig p√• samme person, er den personen ute av spillet ‚Äì og mister muligheten til √• p√•virke √∏yets skjebne.
‚Ä¢ Gjetter du feil, skjer det ingenting ‚Äì men du har brukt opp ett av dine tre fors√∏k.

üèÜ Vinner
Alle gjenlevende deltakere p√• laget som f√∏rst finner √∏yet er √• anse som vinnere.
Det er derfor i din interesse √•:
‚Ä¢ Holde deg i live
‚Ä¢ Finne ut hvem som er p√• ditt lag
‚Ä¢ F√• tak i √∏yet f√∏r de andre

üß† Husk:
Den som finner √∏yet, bestemmer hva som skjer.
Men ingen kan vinne alene. Og ingen er trygge.
`,
      intro: `üé≠ Velkommen til Villa Leone ‚Äì et kveldsm√∏te i kunstens og maktens navn.
Dere er samlet i kveld etter en eksklusiv invitasjon fra den karismatiske ‚Äì og etter hvert omdiskuterte ‚Äì kunstsamleren Olav W. Lehne. Etter mange √•r i det skjulte har Olav n√• √•pnet d√∏rene til Villa Leone, hans private residens, for en intim gruppe av spesielt utvalgte gjester.

Anledningen? En spektakul√¶r avsl√∏ring: Athenas √òye ‚Äì en juvellignende artefakt av uvanlig skj√∏nnhet og ukjent opprinnelse. If√∏lge Olav ble √òyet ‚Äúoppdaget‚Äù ved en tilfeldighet i kjelleren til en bygning han nylig overtok i Toscana. Det er n√• satt i en glassmonter midt i Villaens salong, omgitt av vakthold og diskusjon.

Men gjenstanden har allerede skapt uro.

Eksperter mener det dreier seg om en hellenistisk relikvie som forsvant under uklare omstendigheter etter andre verdenskrig. En etterlysning fra Museet for Bysantinsk Kultur i Thessaloniki hevder at √òyet ble stj√•let i 1948, og at det med sikkerhet tilh√∏rer museet og dermed den greske staten. Dette har ikke hindret Olav i √• kalle det ‚Äúh√∏ydepunktet i sin samling‚Äù.

De fleste her kjenner Olav godt ‚Äì og mange kjenner hverandre fra f√∏r, b√•de sosialt og gjennom kunstmilj√∏et. Det er nettopp derfor dere er her: Olav stoler p√• dere.

Men kan han egentlig det?

For uansett relasjon eller bakgrunn, har alle som er til stede forberedt seg. Det ryktes om b√•de sannsynlige og usannsynlige allianser ‚Äì og √©n ting er sikkert:
Alle har egne planer for Athenas √òye.`,
    },
  });

  const teite = await prisma.teams.create({
    data: {
      name: "Returnere",
      gamesId: game.id,
    },
  });

  const copier = await prisma.teams.create({
    data: {
      name: "Selge",
      gamesId: game.id,
    },
  });

  const patent = await prisma.teams.create({
    data: {
      name: "Bevise forfalskning",
      gamesId: game.id,
    },
  });

  const destroyer = await prisma.teams.create({
    data: {
      name: "√òdelegge",
      gamesId: game.id,
    },
  });
  const csvPath = path.join(process.cwd(), "data", "updatedAlias.csv");
  const aliases: AliasCSVLeon[] = [];

  // Read CSV
  await new Promise((resolve, reject) => {
    createReadStream(csvPath)
      .pipe(
        parse<AliasCSVLeon, AliasCSVLeon>({
          headers: true,
          delimiter: ";",
          quote: '"',
          ignoreEmpty: true,
        })
      )
      .on("data", (row) => {
        aliases.push(row);
      })
      .on("end", resolve)
      .on("error", reject);
  });

  // Seed data
  for (const row of aliases) {
    try {
      await prisma.alias.create({
        data: {
          externalId: row.externalId,
          description: row.description,
          name: row.name,
          hiddenDescription: row.hiddenDescription,
          teamsId: parseInt(row.teamsId, 10),
        },
      });
    } catch (error) {
      console.error(`‚ùå Error creating alias ${row.name}:`, error);
    }
  }

  const csvPathHints = path.join(process.cwd(), "data", "updatedCodes.csv");
  const hints: Hint[] = [];
  // Read CSV
  await new Promise((resolve, reject) => {
    createReadStream(csvPathHints)
      .pipe(
        parse<Hint, Hint>({
          headers: true,
          delimiter: ";",
          quote: '"',
          escape: '"',
          ignoreEmpty: true,
          trim: true,
        })
      )
      .on("data", (row) => hints.push(row))
      .on("end", resolve)
      .on("error", reject);
  });

  const hintsFiltered = hints.filter((hint) => hint.assignment);

  // Seed data
  for (const row of hintsFiltered) {
    try {
      await prisma.codes.create({
        data: {
          code: row.code,
          hint: row.hint,
          assignment: row.assignment,
          externalId: row.externalId,
        },
      });
    } catch (error) {
      console.error(`‚ùå Error creating alias ${row.assignment}:`, error);
    }
  }

  const csvPathFinalQuestion = path.join(
    process.cwd(),
    "data",
    "updatedFinalQuestion.csv"
  );
  const finalQuestions: FinalQuesiton[] = [];
  // Read CSV
  await new Promise((resolve, reject) => {
    createReadStream(csvPathFinalQuestion)
      .pipe(
        parse<FinalQuesiton, FinalQuesiton>({
          headers: true,
          delimiter: ";",
          quote: '"',
          escape: '"',
          ignoreEmpty: true,
          trim: true,
        })
      )
      .on("data", (row) => finalQuestions.push(row))
      .on("end", resolve)
      .on("error", reject);
  });

  const finalQuestionsFiltered = finalQuestions.filter(
    (question) => question.assignment
  );
  // Seed data
  for (const row of finalQuestionsFiltered) {
    try {
      await prisma.finalQuestion.create({
        data: {
          code: row.code,
          assignment: row.assignment,
          externalId: row.externalId,
        },
      });
    } catch (error) {
      console.error(`‚ùå Error creating alias ${row.assignment}:`, error);
    }
  }
}
main();

export interface AliasCSV {
  id: string;
  sortId: string;
  teamsId: string;
  teamsName: string;
  title: string;
  firstName: string;
  nickName: string;
  LastName: string;
  Initials: string;
  FullName: string;
  kj√∏nn: string;
  publicDescription: string;
  secretDescription: string;
}
export interface AliasCSVLeon {
  id: number;
  externalId: string;
  name: string;
  description: string;
  hiddenDescription: string;
  teamsId: string;
  alive: boolean;
}

interface Hint {
  id: number;
  code: string;
  externalId: string;
  hint: string;
  assignment: string;
}

interface FinalQuesiton {
  id: number;
  externalId: string;
  code: string;
  assignment: string;
}
